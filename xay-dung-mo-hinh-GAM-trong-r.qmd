---
output: html_document
editor_options: 
  chunk_output_type: console
---

# <b>Xây dựng mô hình GAM trong R</b> 

`https://m-clark.github.io/generalized-additive-models/`

## Import dataset

**Câu hỏi nghiên cứu: Đánh giá ảnh hưởng của các biến `Income`, `Edu`, `Health` đến kết quả học tập `Overall`.**  

```{r, message=FALSE, warning=FALSE}
# https://raw.githubusercontent.com/m-clark/generalized-additive-models/master/data/pisasci2006.csv
pisa <- read.csv('data_raw_1/pisasci2006.csv')
pisa
```

## Summary dữ liệu cho các cột numeric

```{r, message=FALSE, warning=FALSE}
# devtools::install_github('m-clark/tidyext')
library(tidyverse)
library(tidyext)
library(gt)

pisa |> tidyext::num_by(vars(-Country)) |> gt::gt()
```

## Pairs plot

```{r, message=FALSE, warning=FALSE, fig.asp = 0.75, fig.width=10}
library(GGally)

better_smooth <- function(data, mapping, ptcol, ptalpha=1, ptsize=1, linecol, ...) {
  p <- ggplot(data = data, mapping = mapping) +
    geom_point(color = ptcol, alpha=ptalpha, size = ptsize) +
    geom_smooth(color = linecol, ...)
  p
}

p <- GGally::ggpairs(
  pisa[, -c(1, 3:5)],
  lower = list(
    continuous = GGally::wrap(
      better_smooth,
      ptalpha = .25,
      ptcol = '#D55E00',
      ptsize = 1,
      linecol = '#03b3ff',
      method = 'loess',
      se = FALSE,
      lwd = .5
    )
  ),
  diag = list(continuous = GGally::wrap(
    'densityDiag', color = 'gray50', lwd = .5
  )),
  # upper=list(continuous=GGally::wrap(better_corr)),
  axisLabels = "none"
)

p
```

## Fitting model GAM

```{r, message=FALSE, warning=FALSE, fig.asp = 0.5, fig.width=10}
library(gamRR)
library(nlme)
library(mgcv)
mod_gam2 = gam(Overall ~ s(Income) + s(Edu) + s(Health), data = pisa)
summary(mod_gam2)
plot(mod_gam2)
```

## Thể hiện ảnh hưởng của từng biến `x` đầu vào lên biến `y` đầu ra

```{r, message=FALSE, warning=FALSE, fig.asp = 0.75, fig.width=10}
library(ggeffects)
library(gratia)
plot(ggeffects::ggpredict(mod_gam2), facets = TRUE)
gratia::draw(mod_gam2)
```

## Cách tính relative risk trong model GAM

Code này tham khảo theo package `gamRR`. Khi phân tích source code ta thấy relative risk được tính như sau:

1/ Từ model GAM đã fitting ở trên `mod_gam2`

2/ Ta chọn 1 vector tham chiếu, ở đây ví dụ là `ref = c(Income = pisa$Income[1], Edu = pisa$Edu[1], Health = pisa$Health[1])` nghĩa là ngay dòng đầu tiên của dataset. Vai trò của vector tham chiếu này (1 điểm data point) là giúp làm mẫu số cho công thức tính relative risk.

3/ Ta chọn 1 biến `x` để kiểm tra relative risk, như trong trường hợp này là biến `Income`.

4/ Khi đó ta tạo dataframe với cột `Income` sẽ thay đổi theo dataset ban đầu nhưng hai cột `Edu` và `Health` sẽ không đổi (chính là điểm datapoint tham chiếu ở bước 2)

5/ Thực hiện predict để tìm giá trị `y predict` cho điểm tham chiếu (ở bước 2).

6/ Thực hiện predict để tìm **các** giá trị `y predict` cho dataframe (ở bước 4)

7/ Relative risk là tỷ số giữa các giá trị `y predict` cho dataframe (ở bước 4) chia cho giá trị `y predict` (ở bước 2), trong trường hợp này là relative risk của biến `Income`.

Toàn bộ quy trình này được thể hiện qua đồ thị như bên dưới. Lưu ý là các thông tin sau chỉ là nhận định của cá nhân mình, để hiểu rõ thuật toán bạn sẽ liên hệ với tác giả package theo thông tin sau.

`https://cran.r-project.org/web/packages/gamRR/index.html`

```{r, eval=FALSE}
gamRR::gamRR <- function (fit, ref, est, data, n.points = 10, plot = TRUE, ylim = NULL) 
{
  ref = data.frame(t(ref))
  form = as.character(fit$formula)
  x.list = strsplit(form[3], "\\+")[[1]]
  x.list = gsub(" ", "", x.list)
  x.list = sapply(strsplit(x.list, "\\,"), "[", 1)
  x.list = gsub("s\\(", "", x.list)
  x.list = gsub("as.factor\\(", "", x.list)
  x.list = gsub("factor\\(", "", x.list)
  x.list = gsub("offset\\(", "", x.list)
  x.list = gsub("log\\(", "", x.list)
  x.list = gsub("\\)", "", x.list)
  if (length(names(ref)) != length(x.list)) {
    stop("The number of variables in the 'ref' argument is not equal to those in the model!")
  }
  if (any(!(names(ref) %in% x.list))) {
    stop("Some variables in the 'ref' argument are not in the model!")
  }
  for (i in 1:length(x.list)) {
    data = data[!is.na(data[, x.list[i]]), ]
  }
  rrref = predict(fit, type = "response", newdata = ref)
  ndata = matrix(rep(0, nrow(data) * length(names(ref))), ncol = length(names(ref)))
  ndata = data.frame(ndata)
  names(ndata) = names(ref)
  # 1 biến chạy, giữ nguyên các biến còn lại
  ndata[, match(est, names(ndata))] = data[, match(est, names(data))]
  ndata[, -match(est, names(ref))] = ref[, -match(est, names(ref))]
  rr = predict(fit, type = "response", newdata = ndata)
  # relative risk là kết quả y đầu ra (tiên lượng với 1 biến x chạy, và các biến kia giữ nguyên) chia cho điểm tham chiếu
  rr = as.numeric(rr)/as.numeric(rrref)
  ref_no_est = names(ref)[-match(est, names(ref))]
  i = 1
  ndata = matrix(rep(0, nrow(data) * length(names(ref))), ncol = length(names(ref)))
  ndata = data.frame(ndata)
  names(ndata) = names(ref)
  ndata[, match(est, names(ndata))] = data[, match(est, names(data))]
  for (j in 1:length(ref_no_est)) {
    ndata[, ref_no_est[j]] = data[i, ref_no_est[j]]
  }
  rrn = predict(fit, type = "response", newdata = ndata)/as.numeric(rrref)
  for (i in 2:nrow(data)) {
    ndata = matrix(rep(0, nrow(data) * length(names(ref))), 
                   ncol = length(names(ref)))
    ndata = data.frame(ndata)
    names(ndata) = names(ref)
    ndata[, match(est, names(ndata))] = data[, match(est, 
                                                     names(data))]
    for (j in 1:length(ref_no_est)) {
      ndata[, ref_no_est[j]] = data[i, ref_no_est[j]]
    }
    rrn = cbind(rrn, predict(fit, type = "response", newdata = ndata)/as.numeric(rrref))
  }
  se = apply(rrn, 1, FUN = "sd")/sqrt(nrow(data) - 1)
  u = rr + 1.96 * se
  l = rr - 1.96 * se
  xy = data.frame(x = data[, est], rr = rr, u = u, l = l)
  xy = xy[order(xy$x), ]
  rangE = range(data[, est])
  est.seq = seq(from = rangE[1], to = rangE[2], length.out = n.points)
  seq.ind = which(abs(est.seq - as.numeric(ref[est])) == min(abs(est.seq - 
                                                                   as.numeric(ref[est]))))
  est.seq[seq.ind] = as.numeric(ref[est])
  nxy = matrix(rep(0, n.points * 4), ncol = 4)
  nxy = data.frame(nxy)
  names(nxy) = c("x", "rr", "u", "l")
  for (i in 1:n.points) {
    ind = which(abs(xy$x - est.seq[i]) == min(abs(xy$x - 
                                                    est.seq[i])))
    nxy[i, ] = xy[ind, ]
  }
  nxy[seq.ind, 2:4] = 1
  if (plot) {
    if (is.null(ylim)) {
      ylim = c(min(xy$l), max(xy$u))
    }
    plot(spline(nxy$x, nxy$rr, xmax = as.numeric(ref[, est])), 
         type = "l", xlim = c(min(nxy$x), max(nxy$x)), ylim = ylim, 
         xlab = est, ylab = "RR")
    lines(spline(nxy$x, nxy$l, xmax = as.numeric(ref[, est])), 
          lty = 2)
    lines(spline(nxy$x, nxy$u, xmax = as.numeric(ref[, est])), 
          lty = 2)
    lines(spline(nxy$x, nxy$rr, xmin = as.numeric(ref[, est])), 
          lty = 1)
    lines(spline(nxy$x, nxy$l, xmin = as.numeric(ref[, est])), 
          lty = 2)
    lines(spline(nxy$x, nxy$u, xmin = as.numeric(ref[, est])), 
          lty = 2)
  }
  return(nxy)
}
```


```{r, message=FALSE, warning=FALSE}
gamRR::gamRR(fit = mod_gam2,
             ref = c(Income = pisa$Income[1],
                     Edu = pisa$Edu[1],
                     Health = pisa$Health[1]),
             est = "Income",
             data = pisa,
             n.points = 10,
             plot = TRUE,
             ylim = NULL)

gamRR::gamRR(fit = mod_gam2,
             ref = c(Income = pisa$Income[1],
                     Edu = pisa$Edu[1],
                     Health = pisa$Health[1]),
             est = "Edu",
             data = pisa,
             n.points = 10,
             plot = TRUE,
             ylim = NULL)

gamRR::gamRR(fit = mod_gam2,
             ref = c(Income = pisa$Income[1],
                     Edu = pisa$Edu[1],
                     Health = pisa$Health[1]),
             est = "Health",
             data = pisa,
             n.points = 10,
             plot = TRUE,
             ylim = NULL)
```

# Tài liệu tham khảo

1. <https://rpubs.com/HeatWave2019/572700>

2. <https://rpubs.com/Huyen_Nguyen_Rosie/1055522>

3. <https://stat.ethz.ch/pipermail/r-help/2003-May/033804.html>

4. <https://stats.stackexchange.com/questions/33327/confidence-interval-for-gam-model>

5. <https://www.researchgate.net/post/How_can_I_calculate_the_confidence_Interval_of_the_relative_risk_when_using_the_GAM_model_and_the_R_language_My_modelgam_DeathsHeat_Cold_sTM>